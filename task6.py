# -*- coding: utf-8 -*-
"""Task6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LkibLH5098OfHsurVbfVqsZdmJRk5wP4
"""

# Install necessary libraries
pip install streamlit langchain-google-genai googletrans==4.0.0-rc1 python-dotenv
!pip install googletrans
import os
import ipywidgets as widgets
from IPython.display import display, HTML
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import SystemMessage, HumanMessage
from googletrans import Translator

# ✅ Set Google API Key Directly (Replace with your own API Key)
GOOGLE_API_KEY = "AIzaSyCCvaPOXeNVp72lsvCRMHmFysqlj5sfCG0"

# ✅ Title
display(HTML("<h1 style='text-align:center;'>🗺️✈︎ Destination Dynamo AI</h1>"))

# ✅ Travel Form UI using ipywidgets
source_city = widgets.Text(placeholder="E.g., New Delhi", description="🛫 From:")
destination_city = widgets.Text(placeholder="E.g., Amsterdam", description="📍 To:")
travel_date = widgets.DatePicker(description="📆 Date:")
currency = widgets.Dropdown(options=["USD", "INR", "EUR", "GBP", "JPY"], description="💲 Currency:")
preferred_mode = widgets.Dropdown(options=["Any", "Flight", "Train", "Bus", "Cab"], description="🚗 Mode:")
sort_by = widgets.RadioButtons(options=["Price", "Duration"], description="📊 Sort:")
language = widgets.Dropdown(options=["English", "Spanish", "French", "German", "Hindi"], description="🌍 Language:")

# Display UI elements
display(source_city, destination_city, travel_date, currency, preferred_mode, sort_by, language)

# ✅ Language Code Mapping for Translation
language_codes = {
    "English": "en",
    "Spanish": "es",
    "French": "fr",
    "German": "de",
    "Hindi": "hi",
}

# ✅ Function to fetch AI-generated travel options
def get_travel_options(source, destination, mode, currency):
    system_prompt = SystemMessage(
        content="You are an AI-powered travel assistant. Provide multiple travel options (cab, train, bus, flight) with estimated costs, duration, and relevant travel tips."
    )
    user_prompt = HumanMessage(
        content=f"I am traveling from {source} to {destination} in {currency}. Preferred mode: {mode}. Suggest travel options with estimated cost, duration, and important details."
    )

    # ✅ Initialize AI model
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", google_api_key=GOOGLE_API_KEY)

    try:
        response = llm.invoke([system_prompt, user_prompt])
        return response.content if response else "⚠️ No response from AI."
    except Exception as e:
        return f"❌ Error fetching travel options: {str(e)}"

# ✅ Function to Translate Text
def translate_text(text, target_language):
    if target_language == "English":  # No translation needed
        return text

    translator = Translator()
    translated_text = translator.translate(text, dest=language_codes.get(target_language, "en")).text
    return translated_text

# ✅ Button to Fetch Travel Options
def fetch_travel_info(b):
    if source_city.value.strip() and destination_city.value.strip():
        display(HTML("<h3>🔄 Fetching best travel options...</h3>"))
        travel_info = get_travel_options(source_city.value, destination_city.value, preferred_mode.value, currency.value)

        # Translate if necessary
        translated_info = translate_text(travel_info, language.value)

        # Display Results
        display(HTML(f"<h3>✅ AI-Generated Travel Recommendations:</h3><p>{translated_info}</p>"))
    else:
        display(HTML("<p style='color:red;'>⚠️ Please enter both source and destination locations.</p>"))

# Add button
fetch_button = widgets.Button(description="🔍 Find Travel Options", button_style="primary")
fetch_button.on_click(fetch_travel_info)

# Display button
display(fetch_button)

# ✅ Footer
display(HTML("""
    <div style='text-align:center; padding:10px; margin-top:20px; font-weight:bold;'>
        Created by Sai Kamal 🚀
    </div>
"""))

